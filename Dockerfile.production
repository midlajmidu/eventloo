# Multi-stage Dockerfile for Django + React production deployment
# Stage 1: Build React frontend
FROM node:18-alpine AS frontend-build

# Set working directory
WORKDIR /app/frontend

# Copy package files
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY frontend/src/ ./src/
COPY frontend/public/ ./public/
COPY frontend/tailwind.config.js ./
COPY frontend/postcss.config.js ./

# Build React app
RUN npm run build:production

# Stage 2: Build Django backend
FROM python:3.11-slim AS backend-build

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DJANGO_SETTINGS_MODULE=event_management.settings

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        libpq-dev \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY backend/requirements-production.txt requirements.txt
RUN pip install --upgrade pip
RUN pip install -r requirements.txt

# Copy backend project files
COPY backend/ ./

# Create directories for static and media files
RUN mkdir -p staticfiles media templates

# Copy React build files to Django templates
COPY --from=frontend-build /app/frontend/build/static/ ./staticfiles/
COPY --from=frontend-build /app/frontend/build/index.html ./templates/

# Collect static files
RUN python manage.py collectstatic --noinput

# Stage 3: Production runtime
FROM python:3.11-slim AS production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DJANGO_SETTINGS_MODULE=event_management.settings \
    PORT=8080

# Set work directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        libpq5 \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Python packages from backend build
COPY --from=backend-build /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/
COPY --from=backend-build /usr/local/bin/ /usr/local/bin/

# Copy application files
COPY --from=backend-build /app/ ./

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser
RUN chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:$PORT/api/ || exit 1

# Start command
CMD exec gunicorn --bind 0.0.0.0:$PORT --workers 1 --threads 4 --timeout 300 --keep-alive 5 --max-requests 1000 --max-requests-jitter 100 event_management.wsgi:application 