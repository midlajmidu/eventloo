import React, { useState, useEffect } from 'react';
import { useNavigate, useOutletContext } from 'react-router-dom';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell
} from 'recharts';

const AdminDashboard = () => {
  const navigate = useNavigate();
  const { user } = useOutletContext();
  const [dashboardData, setDashboardData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [teamsData, setTeamsData] = useState([]);
  const [eventsData, setEventsData] = useState([]);
  const [studentsData, setStudentsData] = useState([]);
  const [pointsData, setPointsData] = useState([]);
  const [globalPointsData, setGlobalPointsData] = useState({ teams: [], students: [] });
  const [showManageMembersModal, setShowManageMembersModal] = useState(false);
  const [showEditTeamModal, setShowEditTeamModal] = useState(false);
  const [selectedTeam, setSelectedTeam] = useState(null);
  const [editFormData, setEditFormData] = useState({
    name: '',
    description: ''
  });

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      const { dashboardAPI, teamsAPI, eventsAPI, studentsAPI, pointsAPI } = await import('../services/api');
      
      // Fetch dashboard summary
      const dashboardResponse = await dashboardAPI.getAdminSummary();
      setDashboardData(dashboardResponse.data);
      
      // Fetch teams data
      const teamsResponse = await teamsAPI.getTeams();
      setTeamsData(teamsResponse.data || []);
      
      // Fetch events data
      const eventsResponse = await eventsAPI.getEvents();
      setEventsData(eventsResponse.data?.results || eventsResponse.data || []);
      
      // Fetch students data
      try {
        const studentsResponse = await studentsAPI.getStudents();
        setStudentsData(studentsResponse.data?.results || studentsResponse.data || []);
      } catch (error) {
        console.log('Students API not available, using fallback data');
        setStudentsData([]);
      }

      // Fetch points data
      try {
        const pointsResponse = await pointsAPI.getPoints();
        setPointsData(pointsResponse.data?.results || pointsResponse.data || []);
      } catch (error) {
        console.log('Points API not available, using fallback data');
        setPointsData([]);
      }

      // Fetch global points leaderboard data
      try {
        const leaderboardResponse = await pointsAPI.getLeaderboard();
        setGlobalPointsData(leaderboardResponse.data);
      } catch (error) {
        console.log('Global points API not available, using fallback data');
        setGlobalPointsData({ teams: [], students: [] });
      }
      
    } catch (error) {
      console.error('Failed to fetch dashboard data:', error);
      setError('Failed to load dashboard data');
    } finally {
      setLoading(false);
    }
  };

  const handleManageMembers = (team) => {
    setSelectedTeam(team);
    setShowManageMembersModal(true);
  };

  const handleEditTeam = (team) => {
    setSelectedTeam(team);
    setEditFormData({
      name: team.name,
      description: team.description || ''
    });
    setShowEditTeamModal(true);
  };

  const handleSaveTeam = async () => {
    try {
      const { teamsAPI } = await import('../services/api');
      await teamsAPI.updateTeam(selectedTeam.id, editFormData);
      setShowEditTeamModal(false);
      fetchDashboardData();
      alert('Team updated successfully!');
    } catch (error) {
      console.error('Error updating team:', error);
      alert('Failed to update team');
    }
  };

  const handleAddMember = async (studentId) => {
    try {
      const { teamsAPI } = await import('../services/api');
      await teamsAPI.addMember(selectedTeam.id, { student_id: studentId });
      fetchDashboardData();
      alert('Member added successfully!');
    } catch (error) {
      console.error('Error adding member:', error);
      alert('Failed to add member');
    }
  };

  const handleRemoveMember = async (studentId) => {
    try {
      const { teamsAPI } = await import('../services/api');
      await teamsAPI.removeMember(selectedTeam.id, { student_id: studentId });
      fetchDashboardData();
      alert('Member removed successfully!');
    } catch (error) {
      console.error('Error removing member:', error);
      alert('Failed to remove member');
    }
  };

  // Chart colors
  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4'];

  // Calculate accurate statistics
  const calculateStats = () => {
    // Ensure data is arrays before processing
    const teamsArray = Array.isArray(teamsData) ? teamsData : [];
    const eventsArray = Array.isArray(eventsData) ? eventsData : [];
    const studentsArray = Array.isArray(studentsData) ? studentsData : [];
    
    const stats = {
      totalEvents: eventsArray.length,
      activeEvents: eventsArray.filter(e => e.status === 'published' || e.status === 'ongoing').length,
      completedEvents: eventsArray.filter(e => e.status === 'completed').length,
      totalTeams: teamsArray.length,
      totalStudents: studentsArray.length,
      studentsInTeams: teamsArray.reduce((sum, team) => sum + (team.member_count || 0), 0),
      totalPoints: teamsArray.reduce((sum, team) => sum + (team.points_earned || 0), 0),
      averagePointsPerTeam: teamsArray.length > 0 ? (teamsArray.reduce((sum, team) => sum + (team.points_earned || 0), 0) / teamsArray.length).toFixed(1) : 0,
      topPerformingTeam: teamsArray.length > 0 ? teamsArray.reduce((max, team) => (team.points_earned || 0) > (max.points_earned || 0) ? team : max) : null,
      studentsByCategory: {
        hs: studentsArray.filter(s => s.category === 'hs').length,
        hss: studentsArray.filter(s => s.category === 'hss').length,
        open: studentsArray.filter(s => s.category === 'open').length
      },
      eventsByType: {
        competition: eventsArray.filter(e => e.event_type === 'competition').length,
        cultural: eventsArray.filter(e => e.event_type === 'cultural').length,
        sports: eventsArray.filter(e => e.event_type === 'sports').length,
        academic: eventsArray.filter(e => e.event_type === 'academic').length,
        workshop: eventsArray.filter(e => e.event_type === 'workshop').length,
        seminar: eventsArray.filter(e => e.event_type === 'seminar').length,
        other: eventsArray.filter(e => e.event_type === 'other').length
      }
    };
    return stats;
  };

  const stats = calculateStats();
  
  // Debug logging
  console.log('teamsData:', teamsData);
  console.log('stats.totalTeams:', stats.totalTeams);
  
  // Ensure teamsData is always an array for safe operations
  const safeTeamsData = Array.isArray(teamsData) ? teamsData : [];
  
  // Debug logging
  console.log('teamsData:', teamsData);
  console.log('safeTeamsData:', safeTeamsData);
  console.log('stats.totalTeams:', stats.totalTeams);
  
  // Debug logging
  console.log('teamsData:', teamsData);
  console.log('safeTeamsData:', safeTeamsData);
  console.log('stats.totalTeams:', stats.totalTeams);

  // Prepare chart data using global points
  const topTeamsData = globalPointsData.teams
    .sort((a, b) => (b.points || 0) - (a.points || 0))
    .slice(0, 6)
    .map(team => ({
      name: team.name.length > 12 ? team.name.substring(0, 12) + '...' : team.name,
      points: team.points || 0,
      members: team.members || 0,
      events_participated: team.events_participated || 0
    }));

  // Students distribution by category
  const studentsDistribution = [
    { name: 'High School', value: stats.studentsByCategory.hs, color: COLORS[0] },
    { name: 'Higher Secondary', value: stats.studentsByCategory.hss, color: COLORS[1] },
    { name: 'Open Category', value: stats.studentsByCategory.open, color: COLORS[2] }
  ].filter(cat => cat.value > 0);

  // Events distribution by type
  const eventsDistribution = Object.entries(stats.eventsByType)
    .filter(([type, count]) => count > 0)
    .map(([type, count], index) => ({
      name: type.charAt(0).toUpperCase() + type.slice(1),
      value: count,
      color: COLORS[index % COLORS.length]
    }));

  // Recent activities from points data
  const recentActivities = pointsData
    .sort((a, b) => new Date(b.awarded_at) - new Date(a.awarded_at))
    .slice(0, 5)
    .map(record => ({
      id: record.id,
      action: `${record.team?.name || record.student?.first_name || 'Unknown'} earned ${record.points} points`,
      reason: record.reason,
      time: new Date(record.awarded_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),
      type: 'points'
    }));

  const quickActions = [
    {
      title: 'Create Event',
      description: 'Set up a new school event',
      icon: '📅',
      color: 'from-blue-500 to-blue-600',
      hoverColor: 'hover:from-blue-600 hover:to-blue-700',
      action: () => navigate('/admin/events')
    },
    {
      title: 'Add Students',
      description: 'Register new students',
      icon: '🎓',
      color: 'from-green-500 to-green-600',
      hoverColor: 'hover:from-green-600 hover:to-green-700',
      action: () => navigate('/admin/students')
    },
    {
      title: 'Manage Teams',
      description: 'Create and organize teams',
      icon: '👥',
      color: 'from-purple-500 to-purple-600',
      hoverColor: 'hover:from-purple-600 hover:to-purple-700',
      action: () => navigate('/admin/teams')
    },
    {
      title: 'Global Points',
      description: 'Manage global points system',
      icon: '🏆',
      color: 'from-orange-500 to-orange-600',
      hoverColor: 'hover:from-orange-600 hover:to-orange-700',
      action: () => navigate('/admin/points')
    }
  ];



  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="h-16 w-16 bg-red-500 rounded-full mx-auto mb-4 flex items-center justify-center">
            <span className="text-white text-2xl">⚠️</span>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Failed to load dashboard</h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <button 
            onClick={fetchDashboardData}
            className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Welcome Header */}
        <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-2xl shadow-xl">
          <div className="px-8 py-8 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-4xl font-bold mb-3">
                  Welcome back, {user?.email?.split('@')[0] || 'Admin'}! 👋
                </h1>
                <p className="text-blue-100 text-xl opacity-90">
                  Here's your comprehensive event management overview
                </p>
              </div>
              <div className="hidden lg:block">
                <div className="text-right">
                  <div className="text-sm text-blue-200 mb-1">Today</div>
                  <div className="text-2xl font-semibold">
                    {new Date().toLocaleDateString('en-US', { 
                      weekday: 'long', 
                      month: 'short', 
                      day: 'numeric' 
                    })}
                  </div>
                  <div className="text-blue-200 text-sm">
                    {new Date().toLocaleDateString('en-US', { year: 'numeric' })}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Key Metrics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-semibold text-gray-600 mb-2">Total Events</p>
                <p className="text-3xl font-bold text-gray-900 mb-2">
                  {stats.totalEvents}
                </p>
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-green-600 font-medium bg-green-50 px-2 py-1 rounded-full">
                    📈 {stats.activeEvents} Active
                  </span>
                  <span className="text-sm text-blue-600 font-medium bg-blue-50 px-2 py-1 rounded-full">
                    ✅ {stats.completedEvents} Completed
                  </span>
                </div>
              </div>
              <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
                <span className="text-3xl">📅</span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-semibold text-gray-600 mb-2">Total Teams</p>
                <p className="text-3xl font-bold text-gray-900 mb-2">
                  {stats.totalTeams}
                </p>
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-purple-600 font-medium bg-purple-50 px-2 py-1 rounded-full">
                    👥 {stats.studentsInTeams} Members
                  </span>
                  <span className="text-sm text-orange-600 font-medium bg-orange-50 px-2 py-1 rounded-full">
                    🏆 {stats.averagePointsPerTeam} Avg Points
                  </span>
                </div>
              </div>
              <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                <span className="text-3xl">👥</span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-semibold text-gray-600 mb-2">Total Students</p>
                <p className="text-3xl font-bold text-gray-900 mb-2">
                  {stats.totalStudents}
                </p>
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-green-600 font-medium bg-green-50 px-2 py-1 rounded-full">
                    ✅ {stats.studentsInTeams} In Teams
                  </span>
                  <span className="text-sm text-red-600 font-medium bg-red-50 px-2 py-1 rounded-full">
                    📊 {stats.totalStudents - stats.studentsInTeams} Unassigned
                  </span>
                </div>
              </div>
              <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center shadow-lg">
                <span className="text-3xl">🎓</span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-semibold text-gray-600 mb-2">Total Points</p>
                <p className="text-3xl font-bold text-gray-900 mb-2">
                  {stats.totalPoints}
                </p>
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-orange-600 font-medium bg-orange-50 px-2 py-1 rounded-full">
                    🏆 {stats.topPerformingTeam?.name || 'N/A'} Top Team
                  </span>
                  <span className="text-sm text-blue-600 font-medium bg-blue-50 px-2 py-1 rounded-full">
                    📊 {stats.topPerformingTeam?.points_earned || 0} Points
                  </span>
                </div>
              </div>
              <div className="w-16 h-16 bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center shadow-lg">
                <span className="text-3xl">🏆</span>
              </div>
            </div>
          </div>
        </div>

        {/* Interactive Charts */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Top Performing Teams Bar Chart */}
          <div className="lg:col-span-2 bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-xl font-bold text-gray-900">Top Performing Teams</h3>
                <p className="text-gray-600 text-sm">Points earned by leading teams</p>
              </div>
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
                <span className="text-xl">📊</span>
              </div>
            </div>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={topTeamsData}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                  <XAxis 
                    dataKey="name" 
                    tick={{ fontSize: 12, fill: '#6b7280' }}
                    axisLine={false}
                    tickLine={false}
                  />
                  <YAxis 
                    tick={{ fontSize: 12, fill: '#6b7280' }}
                    axisLine={false}
                    tickLine={false}
                  />
                  <Tooltip 
                    contentStyle={{
                      backgroundColor: '#fff',
                      border: '1px solid #e5e7eb',
                      borderRadius: '12px',
                      boxShadow: '0 10px 25px rgba(0,0,0,0.1)'
                    }}
                    formatter={(value, name) => [`${value} global points`, 'Global Points']}
                  />
                  <Bar 
                    dataKey="points" 
                    fill="url(#colorGradient)"
                    radius={[8, 8, 0, 0]}
                    label={{ position: 'top', fill: '#3B82F6', fontWeight: 'bold' }}
                  />
                  <defs>
                    <linearGradient id="colorGradient" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="0%" stopColor="#3B82F6" />
                      <stop offset="100%" stopColor="#1D4ED8" />
                    </linearGradient>
                  </defs>
                </BarChart>
              </ResponsiveContainer>
            </div>
            {topTeamsData.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <span className="text-2xl">📊</span>
                <p className="mt-2">No team data available</p>
              </div>
            )}
          </div>

          {/* Students Distribution Pie Chart */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-xl font-bold text-gray-900">Students Distribution</h3>
                <p className="text-gray-600 text-sm">By academic category</p>
              </div>
              <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-blue-600 rounded-xl flex items-center justify-center">
                <span className="text-xl">🥧</span>
              </div>
            </div>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={studentsDistribution}
                    cx="50%"
                    cy="50%"
                    innerRadius={40}
                    outerRadius={80}
                    paddingAngle={5}
                    dataKey="value"
                  >
                    {studentsDistribution.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip 
                    contentStyle={{
                      backgroundColor: '#fff',
                      border: '1px solid #e5e7eb',
                      borderRadius: '12px',
                      boxShadow: '0 10px 25px rgba(0,0,0,0.1)'
                    }}
                    formatter={(value, name) => [`${value} students`, name]}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
            <div className="space-y-2 mt-4">
              {studentsDistribution.map((item, index) => (
                <div key={index} className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div 
                      className="w-3 h-3 rounded-full mr-2"
                      style={{ backgroundColor: item.color }}
                    ></div>
                    <span className="text-sm text-gray-600">{item.name}</span>
                  </div>
                  <span className="text-sm font-semibold text-gray-900">{item.value}</span>
                </div>
              ))}
            </div>
            {studentsDistribution.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <span className="text-2xl">🎓</span>
                <p className="mt-2">No student data available</p>
              </div>
            )}
          </div>
        </div>

        {/* Events and Students Distribution */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Events Distribution Chart */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-xl font-bold text-gray-900">Events Distribution</h3>
                <p className="text-gray-600 text-sm">Breakdown by event type</p>
              </div>
              <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
                <span className="text-xl">📅</span>
              </div>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {eventsDistribution.map((eventType, index) => (
                <div key={index} className="text-center p-4 bg-gray-50 rounded-xl">
                  <div 
                    className="w-12 h-12 rounded-full mx-auto mb-2 flex items-center justify-center text-white text-lg font-bold"
                    style={{ backgroundColor: eventType.color }}
                  >
                    {eventType.value}
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-1 text-sm">{eventType.name}</h4>
                  <p className="text-xs text-gray-600">
                    {((eventType.value / eventsDistribution.reduce((sum, type) => sum + type.value, 0)) * 100).toFixed(1)}%
                  </p>
                </div>
              ))}
            </div>
            {eventsDistribution.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <span className="text-2xl">📅</span>
                <p className="mt-2">No events data available</p>
              </div>
            )}
          </div>

          {/* Students Distribution Chart */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-xl font-bold text-gray-900">Students Distribution</h3>
                <p className="text-gray-600 text-sm">Breakdown by academic category</p>
              </div>
              <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-blue-600 rounded-xl flex items-center justify-center">
                <span className="text-xl">📈</span>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {studentsDistribution.map((category, index) => (
                <div key={index} className="text-center p-4 bg-gray-50 rounded-xl">
                  <div 
                    className="w-16 h-16 rounded-full mx-auto mb-3 flex items-center justify-center text-white text-xl font-bold"
                    style={{ backgroundColor: category.color }}
                  >
                    {category.value}
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-1">{category.name}</h4>
                  <p className="text-sm text-gray-600">
                    {((category.value / studentsDistribution.reduce((sum, cat) => sum + cat.value, 0)) * 100).toFixed(1)}%
                  </p>
                </div>
              ))}
            </div>
            {studentsDistribution.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <span className="text-2xl">🎓</span>
                <p className="mt-2">No student data available</p>
              </div>
            )}
          </div>
        </div>

        {/* Quick Actions */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Quick Actions</h2>
              <p className="text-gray-600 text-sm mt-1">Get things done faster</p>
            </div>
            <div className="w-10 h-10 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-xl flex items-center justify-center">
              <span className="text-xl">⚡</span>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {quickActions.map((action, index) => (
              <button
                key={index}
                onClick={action.action}
                className={`group relative p-6 rounded-2xl border border-gray-200 hover:border-transparent hover:shadow-xl transition-all duration-300 text-left overflow-hidden transform hover:-translate-y-1`}
              >
                <div className={`absolute inset-0 bg-gradient-to-br ${action.color} opacity-0 group-hover:opacity-100 transition-opacity duration-300`}></div>
                <div className="relative z-10">
                  <div className="w-14 h-14 bg-gray-100 group-hover:bg-white/20 rounded-2xl flex items-center justify-center mb-4 transition-all duration-300">
                    <span className="text-2xl">{action.icon}</span>
                  </div>
                  <h3 className="font-bold text-gray-900 group-hover:text-white mb-2 transition-colors duration-300">
                    {action.title}
                  </h3>
                  <p className="text-sm text-gray-600 group-hover:text-white/90 mb-4 transition-colors duration-300">
                    {action.description}
                  </p>
                  <div className="flex items-center text-sm text-blue-600 group-hover:text-white transition-colors duration-300">
                    Get started
                    <span className="ml-2 transform group-hover:translate-x-1 transition-transform duration-300">→</span>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Teams Section */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Teams Overview</h2>
              <p className="text-gray-600 text-sm mt-1">Manage your teams and members</p>
            </div>
            <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-blue-600 rounded-xl flex items-center justify-center">
              <span className="text-xl">👥</span>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {(Array.isArray(teamsData) ? teamsData : []).slice(0, 6).map((team) => (
              <div key={team.id} className="bg-gray-50 rounded-xl p-4 hover:shadow-md transition-all duration-200">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                      <span className="text-white font-bold text-sm">{team.name.charAt(0)}</span>
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-900">{team.name}</h3>
                      <p className="text-sm text-gray-600">{team.member_count} members</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-lg font-bold text-blue-600">{team.points_earned}</p>
                    <p className="text-xs text-gray-500">points</p>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <button
                    onClick={() => handleManageMembers(team)}
                    className="text-sm text-blue-600 hover:text-blue-800 font-medium flex items-center space-x-1"
                  >
                    <span>👥</span>
                    <span>Manage Members</span>
                  </button>
                  <button
                    onClick={() => handleEditTeam(team)}
                    className="text-sm text-gray-600 hover:text-gray-800 font-medium flex items-center space-x-1"
                  >
                    <span>✏️</span>
                    <span>Edit</span>
                  </button>
                </div>
              </div>
            ))}
          </div>
          {(Array.isArray(teamsData) ? teamsData : []).length > 6 && (
            <div className="mt-6 text-center">
              <button
                onClick={() => navigate('/admin/teams')}
                className="text-blue-600 hover:text-blue-800 font-medium"
              >
                View All Teams →
              </button>
            </div>
          )}
        </div>

        {/* Recent Activities */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Recent Activities</h2>
              <p className="text-gray-600 text-sm mt-1">What's happening in the system</p>
            </div>
            <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center">
              <span className="text-xl">🔔</span>
            </div>
          </div>
          <div className="space-y-4">
            {recentActivities.length > 0 ? (
              recentActivities.map((activity, index) => (
                <div key={activity.id || index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                      <span className="text-blue-600 text-sm">🏆</span>
                    </div>
                    <div>
                      <p className="font-medium text-gray-900">{activity.action}</p>
                      <p className="text-sm text-gray-600">{activity.reason}</p>
                    </div>
                  </div>
                  <div className="text-sm text-gray-500 bg-white px-2 py-1 rounded-full">
                    {activity.time}
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-8 text-gray-500">
                <span className="text-2xl">🔔</span>
                <p className="mt-2">No recent activities</p>
              </div>
            )}
          </div>
        </div>

      </div>

      {/* Manage Members Modal */}
      {showManageMembersModal && selectedTeam && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold">Manage Members - {selectedTeam.name}</h3>
                <button 
                  onClick={() => setShowManageMembersModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <span className="text-xl">×</span>
                </button>
              </div>
            </div>
            <div className="p-6">
              <div className="mb-6">
                <h4 className="font-medium text-gray-900 mb-3">Current Members ({selectedTeam.member_count})</h4>
                <div className="space-y-2">
                  {selectedTeam.members_details?.map((member) => (
                    <div key={member.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium text-gray-900">{member.name}</p>
                        <p className="text-sm text-gray-600">{member.email}</p>
                      </div>
                      <button
                        onClick={() => handleRemoveMember(member.id)}
                        className="text-red-600 hover:text-red-800 text-sm"
                      >
                        Remove
                      </button>
                    </div>
                  )) || (
                    <p className="text-gray-500">No members found</p>
                  )}
                </div>
              </div>
              <div>
                <h4 className="font-medium text-gray-900 mb-3">Available Students</h4>
                <div className="space-y-2 max-h-60 overflow-y-auto">
                  {studentsData.filter(student => 
                    !selectedTeam.members_details?.some(member => member.id === student.id)
                  ).map((student) => (
                    <div key={student.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div>
                        <p className="font-medium text-gray-900">{student.first_name} {student.last_name}</p>
                        <p className="text-sm text-gray-600">{student.email}</p>
                      </div>
                      <button
                        onClick={() => handleAddMember(student.id)}
                        className="text-blue-600 hover:text-blue-800 text-sm"
                      >
                        Add
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Edit Team Modal */}
      {showEditTeamModal && selectedTeam && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="p-6 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold">Edit Team - {selectedTeam.name}</h3>
                <button 
                  onClick={() => setShowEditTeamModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <span className="text-xl">×</span>
                </button>
              </div>
            </div>
            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Team Name
                  </label>
                  <input
                    type="text"
                    value={editFormData.name}
                    onChange={(e) => setEditFormData({ ...editFormData, name: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    value={editFormData.description}
                    onChange={(e) => setEditFormData({ ...editFormData, description: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows="3"
                  />
                </div>
                {selectedTeam.team_credentials && (
                  <div className="border-t pt-4">
                    <h4 className="font-medium text-gray-900 mb-3">Team Credentials</h4>
                    <div className="space-y-3">
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          Username
                        </label>
                        <input
                          type="text"
                          value={selectedTeam.team_credentials.username}
                          readOnly
                          className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md bg-gray-50 font-mono"
                        />
                      </div>
                      <div>
                        <label className="block text-xs font-medium text-gray-700 mb-1">
                          Password
                        </label>
                        <input
                          type="text"
                          value={selectedTeam.team_credentials.password}
                          readOnly
                          className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md bg-gray-50 font-mono"
                        />
                      </div>
                    </div>
                  </div>
                )}
              </div>
              <div className="flex justify-end space-x-3 pt-6">
                <button
                  onClick={() => setShowEditTeamModal(false)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                  Cancel
                </button>
                <button
                  onClick={handleSaveTeam}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminDashboard; 